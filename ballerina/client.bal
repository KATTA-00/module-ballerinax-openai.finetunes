// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerina/mime;

# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.openai.com/v1") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Delete a file.
    #
    # + file_id - The ID of the file to use for this request.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function delete files/[string file_id](map<string|string[]> headers = {}) returns DeleteFileResponse|error {
        string resourcePath = string `/files/${getEncodedUri(file_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    #
    # + model - The model to delete
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function delete models/[string model](map<string|string[]> headers = {}) returns DeleteModelResponse|error {
        string resourcePath = string `/models/${getEncodedUri(model)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Returns a list of files that belong to the user's organization.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get files(map<string|string[]> headers = {}, *ListFilesQueries queries) returns ListFilesResponse|error {
        string resourcePath = string `/files`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns information about a specific file.
    #
    # + file_id - The ID of the file to use for this request.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get files/[string file_id](map<string|string[]> headers = {}) returns OpenAIFile|error {
        string resourcePath = string `/files/${getEncodedUri(file_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns the contents of the specified file.
    #
    # + file_id - The ID of the file to use for this request.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get files/[string file_id]/content(map<string|string[]> headers = {}) returns byte[]|error {
        string resourcePath = string `/files/${getEncodedUri(file_id)}/content`;
        return self.clientEp->get(resourcePath, headers);
    }

    # List your organization's fine-tuning jobs
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get fine_tuning/jobs(map<string|string[]> headers = {}, *ListPaginatedFineTuningJobsQueries queries) returns ListPaginatedFineTuningJobsResponse|error {
        string resourcePath = string `/fine_tuning/jobs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get info about a fine-tuning job.
    # 
    # [Learn more about fine-tuning](/docs/guides/fine-tuning)
    #
    # + fine_tuning_job_id - The ID of the fine-tuning job.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get fine_tuning/jobs/[string fine_tuning_job_id](map<string|string[]> headers = {}) returns FineTuningJob|error {
        string resourcePath = string `/fine_tuning/jobs/${getEncodedUri(fine_tuning_job_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # List checkpoints for a fine-tuning job.
    #
    # + fine_tuning_job_id - The ID of the fine-tuning job to get checkpoints for.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get fine_tuning/jobs/[string fine_tuning_job_id]/checkpoints(map<string|string[]> headers = {}, *ListFineTuningJobCheckpointsQueries queries) returns ListFineTuningJobCheckpointsResponse|error {
        string resourcePath = string `/fine_tuning/jobs/${getEncodedUri(fine_tuning_job_id)}/checkpoints`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get status updates for a fine-tuning job.
    #
    # + fine_tuning_job_id - The ID of the fine-tuning job to get events for.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get fine_tuning/jobs/[string fine_tuning_job_id]/events(map<string|string[]> headers = {}, *ListFineTuningEventsQueries queries) returns ListFineTuningJobEventsResponse|error {
        string resourcePath = string `/fine_tuning/jobs/${getEncodedUri(fine_tuning_job_id)}/events`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Lists the currently available models, and provides basic information about each one such as the owner and availability.
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get models(map<string|string[]> headers = {}) returns ListModelsResponse|error {
        string resourcePath = string `/models`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    #
    # + model - The ID of the model to use for this request
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get models/[string model](map<string|string[]> headers = {}) returns Model|error {
        string resourcePath = string `/models/${getEncodedUri(model)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
    # 
    # The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
    # 
    # The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
    # 
    # The Batch API only supports `.jsonl` files up to 100 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
    # 
    # Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post files(CreateFileRequest payload, map<string|string[]> headers = {}) returns OpenAIFile|error {
        string resourcePath = string `/files`;
        http:Request request = new;
        mime:Entity[] bodyParts = check createBodyParts(payload);
        request.setBodyParts(bodyParts);
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
    # 
    # Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
    # 
    # [Learn more about fine-tuning](/docs/guides/fine-tuning)
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post fine_tuning/jobs(CreateFineTuningJobRequest payload, map<string|string[]> headers = {}) returns FineTuningJob|error {
        string resourcePath = string `/fine_tuning/jobs`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Immediately cancel a fine-tune job.
    #
    # + fine_tuning_job_id - The ID of the fine-tuning job to cancel.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post fine_tuning/jobs/[string fine_tuning_job_id]/cancel(map<string|string[]> headers = {}) returns FineTuningJob|error {
        string resourcePath = string `/fine_tuning/jobs/${getEncodedUri(fine_tuning_job_id)}/cancel`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
